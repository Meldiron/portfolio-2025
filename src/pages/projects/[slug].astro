---
import Layout from "../../layouts/Layout.astro";
import { getEntry, getCollection } from "astro:content";
import { Image } from "astro:assets";
import { Icon } from "astro-icon/components";
import getReadingTime from "reading-time";

const { slug } = Astro.params;
const entry = await getEntry("projects", slug as string);

if (!entry) {
  return Astro.redirect("/projects");
}

const { Content, headings } = await entry.render();

export async function getStaticPaths() {
  const projects = await getCollection("projects");
  return projects.map((project) => {
    return {
      params: {
        slug: project.slug,
      },
    };
  });
}

const readingTimes: any = {};
for (let i = 0; i < headings.length; i++) {
  const heading = headings[i];
  const nextHeading = headings[i + 1];

  let part = entry.body.split("## " + heading.text)[1] ?? "";
  if (nextHeading) {
    part = part.split("## " + nextHeading.text)[0] ?? "";
  }

  let seconds = Math.round(getReadingTime(part).time / 1000);

  const extraSeconds = part.split(".png)").length * 10;
  seconds += extraSeconds;

  readingTimes[heading.slug] = Math.ceil(seconds / 60) + " min";
}
---

<Layout
  seo={{
    title: entry.data.title,
    description: entry.data.description,
    image: entry.data.image.url,
  }}
>
  <section class="mt-10 max-w-3xl mx-auto px-6">
    <img
      src={entry.data.image.url}
      alt={entry.data.image.alt}
      width={30}
      height={30}
      class="mb-4"
    />

    <h1 class="font-bold text-3xl mb-4">{entry.data.title}</h1>
    <p class="opacity-60 mb-6">
      {entry.data.description}
    </p>
    <div class="mb-2">
      <a
        href={"https://github.com/" + entry.data.github}
        target="_blank"
        class="inline-flex mr-1 flex gap-1 items-center mb-2 w-[fit-content] text-white border-opacity-20 hover:border-opacity-40 border-white border rounded-md text-sm py-0.5 px-2"
      >
        {" "}
        <Icon name="mdi:github" size={14} />
        {entry.data.github}
      </a>

      {
        entry.data.demo && (
          <a
            href={"https://" + entry.data.demo}
            target="_blank"
            class=" inline-flex  mr-1 flex gap-1 items-center mb-2 w-[fit-content] text-white border-opacity-20 hover:border-opacity-40 border-white border rounded-md text-sm py-0.5 px-2"
          >
            {" "}
            <Icon name="mdi:link-variant" size={14} /> {entry.data.demo}
          </a>
        )
      }
    </div>

    {
      entry.data.cover && (
        <Image
          src={entry.data.cover.url}
          alt={entry.data.cover.alt}
          width={800}
          height={300}
          class="w-full rounded-xl mb-10"
        />
      )
    }
  </section>

  <section class="px-6 mx-auto max-w-3xl w-full">
    <div
      class="bg-gradient-to-r from-neutral-900 to-transparent rounded-md px-6 py-6 w-full"
    >
      <h3 class="text-lg mb-3 font-semibold">Table of Contents</h3>
      <div class="flex flex-col gap-1">
        {
          headings.map((heading) => (
            <a href={`#${heading.slug}`} class="text-neutral-100">
              <span class="hover-underline">{heading.text}</span>
              <span class="ml-1 text-sm text-neutral-500">
                {readingTimes[heading.slug] ?? ""}
              </span>
            </a>
          ))
        }
      </div>
    </div>
  </section>

  <section class="px-6 mx-auto max-w-4xl w-full">
    <article
      class="project-article min-w-full w-full prose-neutral prose prose-invert prose-a:text-blue-300 prose-a:underline-offset-4 prose-headings:mb-2 prose-p:text-neutral-100 prose-p:text-lg prose-ul:text-lg prose-hr:border-neutral-700 prose-img:rounded-2xl prose-img:border-2 prose-img:border-neutral-800 prose-img:p-1.5"
    >
      <Content />
    </article>
  </section>
</Layout>

<script>
  import "photoswipe/style.css";
  import pswpModule from "photoswipe";
  import PhotoSwipeLightbox from "photoswipe/lightbox";

  const lightbox = new PhotoSwipeLightbox({
    pswpModule,
    children: "img",
    gallery: ".project-article",
  });

  lightbox.addFilter("domItemData", (itemData, element, linkEl) => {
    const e = element ?? linkEl;
    if (e) {
      itemData.src = e.dataset["pswpSrc"];
      itemData.w = +(e.dataset["pswpWidth"] ?? 0);
      itemData.h = +(e.dataset["pswpHeight"] ?? 0);
    }

    return itemData;
  });

  document.addEventListener(
    "astro:page-load",
    () => {
      document.querySelectorAll(".project-article img").forEach((img) => {
        if (!(img instanceof HTMLImageElement)) {
          return;
        }

        img.setAttribute("data-pswp-src", img.src);
        img.setAttribute("data-pswp-width", img.naturalWidth + "");
        img.setAttribute("data-pswp-height", img.naturalHeight + "");
      });
      if (lightbox) lightbox.init();
    },
    { once: false },
  );
</script>
